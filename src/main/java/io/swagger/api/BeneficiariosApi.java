/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.52).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Beneficiario;
import io.swagger.model.BeneficiariosBody;
import io.swagger.model.Documento;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-02-08T13:56:34.956717658Z[GMT]")
@Validated
public interface BeneficiariosApi {

    @Operation(summary = "Remover um beneficiário", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Beneficiário removido com sucesso"),
        
        @ApiResponse(responseCode = "404", description = "Beneficiário não encontrado") })
    @RequestMapping(value = "/beneficiarios/{beneficiarioId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> beneficiariosBeneficiarioIdDelete(@Parameter(in = ParameterIn.PATH, description = "ID do beneficiário", required=true, schema=@Schema()) @PathVariable("beneficiarioId") Integer beneficiarioId
);


    @Operation(summary = "Listar todos os documentos de um beneficiário", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Lista de documentos do beneficiário", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Documento.class)))),
        
        @ApiResponse(responseCode = "404", description = "Beneficiário não encontrado") })
    @RequestMapping(value = "/beneficiarios/{beneficiarioId}/documentos",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Documento>> beneficiariosBeneficiarioIdDocumentosGet(@Parameter(in = ParameterIn.PATH, description = "ID do beneficiário", required=true, schema=@Schema()) @PathVariable("beneficiarioId") Integer beneficiarioId
);


    @Operation(summary = "Atualizar os dados cadastrais de um beneficiário", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Beneficiário atualizado com sucesso", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Beneficiario.class))),
        
        @ApiResponse(responseCode = "400", description = "Erro nos dados fornecidos"),
        
        @ApiResponse(responseCode = "404", description = "Beneficiário não encontrado") })
    @RequestMapping(value = "/beneficiarios/{beneficiarioId}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Beneficiario> beneficiariosBeneficiarioIdPut(@Parameter(in = ParameterIn.PATH, description = "ID do beneficiário", required=true, schema=@Schema()) @PathVariable("beneficiarioId") Integer beneficiarioId
, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Beneficiario body
);


    @Operation(summary = "Listar todos os beneficiários cadastrados", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Lista de beneficiários", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Beneficiario.class)))),
        
        @ApiResponse(responseCode = "404", description = "Nenhum beneficiário encontrado") })
    @RequestMapping(value = "/beneficiarios",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Beneficiario>> beneficiariosGet();


    @Operation(summary = "Cadastrar um beneficiário junto com seus documentos", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Beneficiário cadastrado com sucesso", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Beneficiario.class))),
        
        @ApiResponse(responseCode = "400", description = "Erro nos dados fornecidos") })
    @RequestMapping(value = "/beneficiarios",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Beneficiario> beneficiariosPost(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody BeneficiariosBody body
);

}

